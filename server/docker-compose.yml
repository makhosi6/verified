version: "3.8"
services:
  emqx1:
    image: emqx:5.0.26
    #deploy:
    #  resources:
    #    limits:
    #      memory: "200M"
    container_name: emqx1
    environment:
      - TZ=Africa/Johannesburg
      - "EMQX_NODE_NAME=emqx@node1.emqx.io"
      - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
      - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]"
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx_ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    restart: unless-stopped
    networks:
      emqx-bridge:
        aliases:
          - node1.emqx.io
    ports:
      - 8083 # WebSocket
      - 18083 # EMQX Dashboard
      - 1883 # TCP
      - 8084 # WebSocket over TLS
      - 8883 # SSL/TLS
    volumes:
      - emqx1_data:/opt/emqx/data

  emqx2:
    image: emqx:5.0.26
    #deploy:
    #  resources:
    #    limits:
    #     memory: "200M"
    container_name: emqx2
    environment:
      - TZ=Africa/Johannesburg
      - "EMQX_NODE_NAME=emqx@node2.emqx.io"
      - "EMQX_CLUSTER__DISCOVERY_STRATEGY=static"
      - "EMQX_CLUSTER__STATIC__SEEDS=[emqx@node1.emqx.io,emqx@node2.emqx.io]"
    healthcheck:
      test: ["CMD", "/opt/emqx/bin/emqx_ctl", "status"]
      interval: 5s
      timeout: 25s
      retries: 5
    restart: unless-stopped
    networks:
      emqx-bridge:
        aliases:
          - node2.emqx.io
    volumes:
      - emqx2_data:/opt/emqx/data

  certbot-init:
    image: certbot/certbot:latest
    container_name: certbot-init
    restart: on-failure
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    command: >
      sh -c '
      certbot certonly --webroot -w /var/www/certbot -n --agree-tos
      --email ${VERIFIED_ADMIN_EMAIL} --no-eff-email
      -d json.verified-za.id -d www.json.verified-za.id -d localhost
      -d api.verified-za.id -d www.api.verified-za.id &&
      cp /etc/letsencrypt/live/* /etc/letsencrypt/live/
      '

    networks:
      - local_bridge

  certbot-renew:
    image: certbot/certbot:latest
    container_name: certbot-renew
    restart: unless-stopped
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    command: renew --quiet --post-hook "nginx -s reload"
    networks:
      - local_bridge

  influxdb:
    image: influxdb:latest
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    ports:
      - "8086"
    volumes:
      - influxdb_data:/var/lib/influxdb
    restart: unless-stopped
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${VERIFIED_INFLUXDB_ADMIN_USER}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${VERIFIED_INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${VERIFIED_INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${VERIFIED_INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${VERIFIED_INFLUXDB_TOKEN}

  telegraf:
      image: telegraf:latest
      deploy:
            resources:
              limits:
                memory: '200M'
      restart: unless-stopped
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./apps/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
        - ./log/nginx:/var/log/nginx:ro
      environment:
        PUBLIC_IP_ADDR: ${PUBLICHOST}
        INFLUXDB_URL: http://influxdb:8086
        INFLUXDB_TOKEN: ${VERIFIED_INFLUXDB_TOKEN}
        INFLUXDB_ORG: ${VERIFIED_INFLUXDB_ORG}
        INFLUXDB_BUCKET: ${VERIFIED_INFLUXDB_BUCKET}
      depends_on:
        - influxdb

  nginx_proxy:
    build:
      context: .
      dockerfile: ./apps/nginx_proxy/Dockerfile
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    ports:
      - "80:80"
      - "443:443"
      - "8883:8883"
    volumes:
      - ./apps/nginx_proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./apps/nginx_proxy/localhost:/cert/localhost/
      - ./apps/nginx_proxy/verified.byteestudio.com:/cert/verified.byteestudio.com/
      - ./apps/nginx_proxy/demo.verified-za.id:/cert/demo.verified-za.id/
      - ./apps/nginx_proxy/json.verified-za.id:/cert/json.verified-za.id/
      - ./apps/nginx_proxy/api.verified-za.id:/cert/api.verified-za.id/
      - ./apps/nginx_proxy/reusable_locations.conf:/etc/nginx/includes/reusable_locations.conf
      - ./log/nginx:/var/log/nginx
    restart: unless-stopped
    depends_on:
      # - fb_notifications_service
      - certbot-init
      - certbot-renew
      - payments_service
      - store_service
      - verify_id_service
      - cdn_service
      - mrz_reader_service
      - mrz_decoder_service
      - app_verified_io_service
    networks:
      - local_bridge

  payments_service:
    build:
      context: .
      dockerfile: ./apps/payments/Dockerfile
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    volumes:
      - ./log/payments:/app/log/payments
    ports:
      - "5436"
    env_file:
      - ./.env
    environment:
      - TZ=Africa/Johannesburg
      - PORT=${PAYMENTS_PORT}
      - NODE_ENV=production
      - PAYMENTS_PORT=${PAYMENTS_PORT}
      - PAYMENTS_TOKEN=${PAYMENTS_TOKEN}
      - PAYMENT_EVENTS_SECRET=${PAYMENT_EVENTS_SECRET}
      # - NODE_DEBUG=http
      - FB_SERVER_TOKEN=${FB_SERVER_TOKEN}
    restart: unless-stopped
    networks:
      - local_bridge

  store_service:
    build:
      context: .
      dockerfile: ./apps/store/Dockerfile
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    volumes:
      - ./apps/store/db:/app/apps/store/db
      - ./log/store:/app/log/store
    ports:
      - "5400"
    env_file:
      - ./.env
    environment:
      - PORT=${STORE_PORT}
      - NODE_ENV=production
      - TZ=Africa/Johannesburg
      - STORE_PORT=${STORE_PORT}
    restart: unless-stopped
    networks:
      - local_bridge

  cdn_service:
    build:
      context: .
      dockerfile: ./apps/cdn/Dockerfile
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    volumes:
      - ./apps/cdn/root:/app/apps/cdn/root
      - ./apps/cdn/static:/app/apps/cdn/static
      - ./log/cdn:/app/log/cdn
    env_file:
      - ./.env
    environment:
      - PORT=${CDN_PORT}
      - TZ=Africa/Johannesburg
    ports:
      - "4334"
    restart: unless-stopped
    networks:
      - local_bridge

  verify_id_service:
    build:
      context: .
      dockerfile: ./apps/verifyId/Dockerfile
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1G"
    volumes:
      - ./log/verify_id:/app/log/verify_id
    ports:
      - "5434"
    env_file:
      - ./.env
    environment:
      - PORT=${VERIFYID_PORT}
      - NODE_ENV=production
      - VERIFYID_PORT=${VERIFYID_PORT}
      - TZ=Africa/Johannesburg
    restart: unless-stopped
    networks:
      - local_bridge

  whatsapp_messaging_service:
    image: makhosi/whatsapp_hook:3.3.minimal
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "200M"
    environment:
      - TZ=Africa/Johannesburg
    ports:
      - "9092"
      - "9093"
    volumes:
      - ./apps/whatsapp_messaging/db:/app/db
    restart: unless-stopped
    networks:
      - local_bridge

  mrz_decoder_service:
    image: makhosi/mrz_decoder:1.0.2
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"

    ports:
      - "5694"
    volumes:
      - ./apps/image_transcoder/pkgs/mrz_decoder/:/app/
    restart: unless-stopped
    networks:
      - local_bridge

  mrz_reader_service:
    image: makhosi/mrz_reader:1.0.1
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    ports:
      - "5693"
    volumes:
      - ./apps/image_transcoder/pkgs/mrz_reader/:/app/
    restart: unless-stopped
    networks:
      - local_bridge

  app_verified_io_service:
    image: makhosi/app_verified_io:latest
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    tty: true
    environment:
      APP_NAME: ${VERIFIEDWEB_APP_NAME}
      APP_URL: ${VERIFIEDWEB_APP_URL}
      APP_ENV: ${VERIFIEDWEB_APP_ENV}
      APP_DEBUG: ${VERIFIEDWEB_APP_DEBUG}
      APP_KEY: ${VERIFIEDWEB_APP_KEY}
      DB_CONNECTION: ${VERIFIEDWEB_DB_CONNECTION}
      DB_HOST: "mysql_db_service"
      DB_PORT: ${VERIFIEDWEB_DB_PORT}
      DB_DATABASE: ${VERIFIEDWEB_DB_DATABASE}
      DB_USERNAME: ${VERIFIEDWEB_DB_USERNAME}
      DB_PASSWORD: ${VERIFIEDWEB_DB_PASSWORD}
      MAIL_HOST: ${VERIFIEDWEB_MAIL_HOST}
      MAIL_PORT: ${VERIFIEDWEB_MAIL_PORT}
      MAIL_USERNAME: ${VERIFIEDWEB_MAIL_USERNAME}
      MAIL_PASSWORD: ${VERIFIEDWEB_MAIL_PASSWORD}
      MAIL_FROM_ADDRESS: ${VERIFIEDWEB_MAIL_FROM_ADDRESS}
      MAIL_FROM_NAME: ${VERIFIEDWEB_MAIL_FROM_NAME}
      TZ: Africa/Johannesburg
    ports:
      - "80"
    # volumes:
    # - ./apps/app_verified_io:/var/www
    restart: unless-stopped
    networks:
      - local_bridge

  mysql_db_service:
    image: mysql:8.0
    deploy:
      resources:
        limits:
          memory: "512M"
          cpus: "0.5"
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${VERIFIEDWEB_DB_DATABASE}
      MYSQL_USER: ${VERIFIEDWEB_DB_USERNAME}
      MYSQL_PASSWORD: ${VERIFIEDWEB_DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${VERIFIEDWEB_DB_PASSWORD}
    volumes:
      - ./apps/mysql:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - local_bridge

volumes:
  emqx1_data:
    driver: local
  emqx2_data:
    driver: local
  influxdb_data:
    driver: local

networks:
  emqx-bridge:
    driver: bridge
  local_bridge:
    driver: bridge
