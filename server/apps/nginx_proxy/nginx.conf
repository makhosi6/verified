worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    sendfile on;
    keepalive_timeout 65;
    client_max_body_size 200M;
    underscores_in_headers on;

    #
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    #
    upstream whatsapp_messaging_service {
        server whatsapp_messaging_service:9092;
    }
    upstream payments_service {
        server payments_service:5436;
    }
    upstream store_service {
        server store_service:5400;
    }
    upstream verify_id_service {
        server verify_id_service:5434;
    }
    upstream cdn_service {
        server cdn_service:4334;
    }
    upstream mrz_reader_service {
        server mrz_reader_service:5693;
    }
    upstream mrz_decoder_service {
        server mrz_decoder_service:5694;
    }
    upstream app_verified_io_service {
        server app_verified_io_service:80;
    }
    upstream mqtt_websocket {
        server emqx1:8083;
        server emqx2:8083 backup;
    }
    upstream mqtt_dashboard {
        server emqx1:18083;
        server emqx2:18083 backup;
    }

    #
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # localhost
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name localhost;

        ssl_certificate /etc/letsencrypt/live/json.verified-za.id/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/json.verified-za.id/privkey.pem;

        # proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_cache_bypass $http_upgrade;

        location /nginx_status {
            stub_status on;
            allow all;
            access_log off;
        }

        location / {
            proxy_pass http://cdn_service;
        }

        location /mrz_reader/ {
            proxy_pass http://mrz_reader_service/;
        }

        location /mrz_decoder/ {
            proxy_pass http://mrz_decoder_service/;
        }

        location /whatsapp/ {
            proxy_pass http://whatsapp_messaging_service/;
        }

        location /payments/ {
            proxy_pass http://payments_service/;
        }

        location /store/ {
            proxy_pass http://store_service/;
        }

        location /verify-id/ {
            proxy_pass http://verify_id_service/;
        }

        location /web/ {
            proxy_pass http://app_verified_io_service/;
        }
        location /influxdb/ {
            proxy_pass http://influxdb:8086
        }

        location /mqtt {
            proxy_pass http://mqtt_websocket/mqtt;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /mqtt_web {
            proxy_pass http://mqtt_dashboard;
        }
    }
    # api.verified-za.id
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name api.verified-za.id www.api.verified-za.id;

        ssl_certificate /etc/letsencrypt/live/api.verified-za.id/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.verified-za.id/privatekey.pem;

        # Proxy Settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_cache_bypass $http_upgrade;
        proxy_pass_request_headers on;
        proxy_pass_header Server;
        proxy_redirect off;

        location / {
            proxy_pass http://cdn_service;
        }

        location /mrz_reader/ {
            proxy_pass http://mrz_reader_service/;
        }

        location /mrz_decoder/ {
            proxy_pass http://mrz_decoder_service/;
        }

        location /whatsapp/ {
            proxy_pass http://whatsapp_messaging_service/;
        }

        location /payments/ {
            proxy_pass http://payments_service/;
        }

        location /store/ {
            proxy_pass http://store_service/;
        }

        location /verify-id/ {
            proxy_pass http://verify_id_service/;
        }

        location /web/ {
            proxy_pass http://app_verified_io_service/;
        }

        location /influxdb/ {
            proxy_pass http://influxdb:8086
        }

        location /mqtt {
            proxy_pass http://mqtt_websocket/mqtt;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /mqtt_web {
            proxy_pass http://mqtt_dashboard;
        }
    }
    # json.verified-za.id
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name json.verified-za.id www.json.verified-za.id;

        ssl_certificate /etc/letsencrypt/live/json.verified-za.id/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/json.verified-za.id/privkey.pem;

        # Proxy Settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_cache_bypass $http_upgrade;

        location / {
            proxy_pass http://cdn_service;
        }

        location /mrz_reader/ {
            proxy_pass http://mrz_reader_service/;
        }

        location /mrz_decoder/ {
            proxy_pass http://mrz_decoder_service/;
        }

        location /whatsapp/ {
            proxy_pass http://whatsapp_messaging_service/;
        }

        location /payments/ {
            proxy_pass http://payments_service/;
        }

        location /store/ {
            proxy_pass http://store_service/;
        }

        location /verify-id/ {
            proxy_pass http://verify_id_service/;
        }

        location /web/ {
            proxy_pass http://app_verified_io_service/;
        }

        location /mqtt {
            proxy_pass http://mqtt_websocket/mqtt;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /mqtt_web {
            proxy_pass http://mqtt_dashboard;
        }
    }
}


# MQTT TCP Configuration
stream {
    upstream mqtt_ssl {
        server emqx1:8883;
        server emqx2:8883 backup;
    }

    server {
        listen 8883 ssl;
        ssl_certificate /etc/letsencrypt/live/json.verified-za.id/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/json.verified-za.id/privkey.pem;
        proxy_pass mqtt_ssl;
        proxy_protocol on;
    }
}